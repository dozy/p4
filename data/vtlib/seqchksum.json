{
"version":"2.0",
"description":"steps in the alignment pipeline perform a checksum-based comparison of input and output (bam) data. Final validation step in alignment pipeline",
"subgraph_io":{
	"ports":{
		"inputs":{
				"_stdin_":"seqchksum_input",
				"target_seqchksum":"merge_output_seqchksum:target_chksum",
				"phix_seqchksum":"merge_output_seqchksum:phix_chksum"
		}
	}
},
"subst_params":[
        {
                "id": "basic_pipeline_params",
                "type":"SPFILE",
		"name":{"subst":"basic_pipeline_params_file"},
                "required": "no",
                "comment":"this will expand to a set of subst_param elements"
        },
	{ "id":"rehash_acc_flds"},
	{ "id":"rehash_chksum_flds"},
	{ "id":"rehash_match_flds"},
	{ "id":"rehash_acc_flag", "subst_constructor":{ "vals":[ "-a", {"subst":"rehash_acc_flds"} ], "postproc":{"op":"concat","pad":""} } },
	{ "id":"rehash_chksum_flag", "subst_constructor":{ "vals":[ "-c", {"subst":"rehash_chksum_flds"} ], "postproc":{"op":"concat","pad":""} } },
	{ "id":"rehash_match_flag", "subst_constructor":{ "vals":[ "-m", {"subst":"rehash_match_flds"} ], "postproc":{"op":"concat","pad":""} } }
],
"nodes":[
        {
                "id":"seqchksum_input",
                "type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
                "cmd":[ "bamseqchksum", {"subst":"src_input_format_flag"} ]
        },
        {
                "id":"merge_output_seqchksum",
                "type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": true,
		"cmd": [ "seqchksum_merge.pl", {"subst":"rehash_acc_flag"}, {"subst":"rehash_chksum_flag"}, {"subst":"rehash_match_flag"}, {"port":"target_chksum", "direction":"in"}, {"port":"phix_chksum", "direction":"in"} ]
        },
        {
                "id":"cmp_seqchksum",
                "type":"EXEC",
		"use_STDIN": false,
		"use_STDOUT": false,
                "cmd":[ "cmp", {"port":"inputchk", "direction":"in"}, {"port":"outputchk", "direction":"in"} ],
                "description":"check input primary/sequence data matches output"
        }
],
"edges":[
        { "id":"seqchksum_input_to_cmp", "from":"seqchksum_input", "to":"cmp_seqchksum:inputchk" },
        { "id":"bamcat_to_chk_output", "from":"merge_output_seqchksum", "to":"cmp_seqchksum:outputchk" }
]
}
