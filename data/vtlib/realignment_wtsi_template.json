{
"description":"Realign data in BAM files producing WTSI DNAP Sequencing Informatics BAM output: full PG history, complete SQ lines, adapter marking, recoding indexing sequence etc",
"version":"1.0",
"subst_params":[
        {
                "id":"basic_pipeline_params_file",
                "required":"yes",
                "subst_constructor":{
                        "vals":[ {"subst":"cfgdatadir"}, "/", "alignment_common.json" ],
                        "postproc":{"op":"concat", "pad":""}
                }
        },
        {
                "id": "basic_pipeline_params",
                "type":"SPFILE",
		"name":{"subst":"basic_pipeline_params_file"},
                "required": "no",
                "comment":"this will expand to a set of subst_param elements"
        },
	{
		"id":"src_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"indatadir"},
				"/",
				{"subst":"rpt"},
				".bam"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"pre_alignment_name","required":"no","default":"pre_alignment_realign"},
	{
		"id":"pre_alignment_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"pre_alignment_name"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"alignment_vtf",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"alignment_method"},
				"_alignment.json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"reference_dict_name","required":"yes"},
	{
		"id":"reference_dict",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"reposdir"},
				"/",
				{"subst":"reference_dict_name"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"post_alignment","required":"no","default":"post_alignment"},
	{
		"id":"post_alignment_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"post_alignment"},
				".json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"initial_phix_aln_bam_name",
		"required":"no",
		"default":"no_aln.bam",
		"subst_constructor":{
			"vals":[
				"no_aln_",
				{"subst":"rpt"},
				".bam"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"initial_phix_aln_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"tmpdir","required":"no","default":"."},
				"/",
				{"subst":"initial_phix_aln_bam_name"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"auxmerge_prep_name","required":"no","default":"auxmerge_prep_realign"},
	{
		"id":"auxmerge_prep",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"auxmerge_prep_name"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"final_output_prep_target_name","required":"no","default":"final_output_prep"},
	{
		"id":"final_output_prep_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"final_output_prep_target_name"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"target_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"outdatadir"},
				"/",
				{"subst":"rpt"},
				{"subst":"bam_ext"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"cram",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"outdatadir"},
				"/",
				{"subst":"rpt"},
				{"subst":"cram_ext"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"out_bamcheck",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"outdatadir"},
				"/",
				{"subst":"rpt"},
				".bamcheck"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"out_flagstat",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"outdatadir"},
				"/",
				{"subst":"rpt"},
				".flagstat"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"seqchksum_vtf","required":"no","default":"seqchksum_realign"},
	{
                "id":"seqchksum",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"seqchksum_vtf"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	}
],
"nodes":[
	{
		"id":"src_bam",
		"type":"INFILE",
		"name":{"subst":"src_bam"},
		"description":"BAM using as input to this pipeline - expected to already contain PhiX (normally from hyb buffer spike-in) alignments"
	},
	{
		"id":"bamcollate2",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":["bamcollate2", "collate=1", "level=0"],
		"comment":"ensure BAM records are gathered by template i.e. queryname"
	},
	{
		"id":"tee0",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":"teepot __PHIX_ALN_OUT__ __TGT_ALN_OUT__ "
	},
	{
		"id":"pre_alignment_target",
		"type":"VTFILE",
		"name":{"subst":"pre_alignment_target"},
		"description":"subgraph containing pre alignment process"
	},
	{
		"id":"alignment_reference_genome",
		"type":"INFILE",
		"name":{"subst":"alignment_reference_genome"},
		"description":"Prefix for reference fasta and Bowtie2 index files"
	},
	{
		"id":"alignment_target",
		"type":"VTFILE",
		"comment":"inputs: _stdin_ (bam), reference; outputs: _stdout_ (bam)",
		"name":{"subst":"alignment_vtf"},
		"description":"subgraph containing alignment process"
	},
	{
		"id":"reference_dict",
		"type":"INFILE",
		"name":{"subst":"reference_dict"},
		"description":"Extra metadata e.g. UR, M5 auxtags for BAM SQ header records"
	},
	{
		"id":"post_alignment_target",
		"type":"VTFILE",
		"comment":"inputs: _stdin_ (bam), reference_dict, no_align_bam; outputs: _stdout_ (bam)",
		"name":{"subst":"post_alignment_target"},
		"description":"subgraph containing post alignment process (target)"
	},
	{
		"id":"bamrecompress_input",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":"bamrecompress verbose=0 numthreads=2"
	},
	{
		"id":"initial_phix_aln_bam",
		"type":"RAFILE",
		"name":{"subst":"initial_phix_aln_bam"}
	},
	{
		"id":"auxmerge_prep",
		"type":"VTFILE",
		"name":{"subst":"auxmerge_prep"},
		"description":"subgraph containing pre alignment process"
	},
	{
		"id":"reference_genome_fasta",
		"type":"INFILE",
		"name":{"subst":"reference_genome_fasta"},
		"description":"Prefix for reference fasta and Bowtie2 index files"
	},
        {
                "id":"final_output_prep_target",
                "type":"VTFILE",
		"comment":"inputs: _stdin_ (bam), reference_genome_fasta; outputs: _stdout_ (bam)",
                "subst_map":{"phix_or_target":"","bstmp":"bspaft","brtmp":"brpaft","bmdtmp":"bmdpaft"},
                "name":{"subst":"final_output_prep_target"},
                "description":"subgraph containing post alignment_filter process (target)"
        },
	{
		"id":"target_bam",
		"type":"OUTFILE",
		"name":{"subst":"target_bam"}
	},
	{
		"id":"cram",
		"type":"OUTFILE",
		"name":{"subst":"cram"}
	},
	{
		"id":"out_bamcheck",
		"type":"OUTFILE",
		"name":{"subst":"out_bamcheck"}
	},
	{
		"id":"out_flagstat",
		"type":"OUTFILE",
		"name":{"subst":"out_flagstat"}
	},
	{
		"id":"seqchksum",
		"type":"VTFILE",
		"comment":"inputs: _stdin_ (start bam), target_bam",
		"name":{"subst":"seqchksum"},
		"description":"subgraph containing seqchksum validation of outputs"
	}
],
"edges":[
	{
		"id":"src_to_bc2",
		"from":"src_bam",
		"to":"bamcollate2"
	},
	{
		"id":"bc2_to_ti",
		"from":"bamcollate2",
		"to":"tee0"
	},
	{
		"id":"t0_to_bamrecompress_input",
		"from":"tee0:__PHIX_ALN_OUT__",
		"to":"bamrecompress_input"
	},
	{
		"id":"brci_to_ipab",
		"from":"bamrecompress_input",
		"to":"initial_phix_aln_bam"
	},
	{
		"id":"ipab_to_bamreset_pre_aln_flt",
		"from":"initial_phix_aln_bam",
		"to":"auxmerge_prep"
	},
	{
		"id":"bamreset_pre_aln_flt_to_",
		"from":"auxmerge_prep",
		"to":"post_alignment_target:no_align_bam"
	},
	{
		"id":"t0_to_pre_alignment_target",
		"from":"tee0:__TGT_ALN_OUT__",
		"to":"pre_alignment_target"
	},
	{
		"id":"bamadapterclip_to_alignment",
		"from":"pre_alignment_target",
		"to":"alignment_target"
	},
	{
		"id":"ref_to_alignment",
		"from":"alignment_reference_genome",
		"to":"alignment_target:reference"
	},
	{
		"id":"alignment_target_to_post_alignment_target",
		"from":"alignment_target",
		"to":"post_alignment_target"
	},
        {
                "id":"reference_dict_to_post_alignment",
                "from":"reference_dict",
                "to":"post_alignment_target:reference_dict"
        },
	{
		"id":"post_alignment_to_alignment_filter",
		"from":"post_alignment_target",
		"to":"final_output_prep_target"
	},
	{
		"id":"ref_to_paf_target",
		"from":"reference_genome_fasta",
		"to":"final_output_prep_target:reference_genome_fasta"
	},
	{
		"id":"paf_to_bam",
		"from":"final_output_prep_target",
		"to":"target_bam"
	},
	{
		"id":"scramble_to_cram",
		"from":"final_output_prep_target:out_cram",
		"to":"cram"
	},
	{
		"id":"bamcheck_to_out",
		"from":"final_output_prep_target:out_bamcheck",
		"to":"out_bamcheck"
	},
	{
		"id":"flagstat_to_out",
		"from":"final_output_prep_target:out_flagstat",
		"to":"out_flagstat"
	},
        {
                "id":"src_bam_to_seqchksum",
                "from":"src_bam",
                "to":"seqchksum"
        },
        {
                "id":"target_bam_to_seqchksum",
                "from":"target_bam",
                "to":"seqchksum:target_bam"
        }
]
}
