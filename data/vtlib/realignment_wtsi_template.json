{
"description":"Realign data in CRAM/BAM/SAM files (default CRAM) producing WTSI DNAP Sequencing Informatics CRAM output: full PG history, complete SQ lines, adapter marking, recoding indexing sequence etc",
"version":"2.0",
"subst_params":[

        {
                "id":"basic_pipeline_params_file",
                "required":"yes",
                "subst_constructor":{
                        "vals":[ {"subst":"cfgdatadir"}, "/", "alignment_common.json" ],
                        "postproc":{"op":"concat", "pad":""}
                }
        },
        {
                "id": "basic_pipeline_params",
                "type":"SPFILE",
		"name":{"subst":"basic_pipeline_params_file"},
                "required": "no",
                "comment":"this will expand to a set of subst_param elements"
        },
	{"id":"src_input_ext","default":"cram"},
	{
		"id":"src_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"indatadir"},
				"/",
				{"subst":"rpt"},
				".",
				{"subst":"src_input_ext"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"src_input_format","default":"cram"},
	{
		"id":"src_input_format_flag",
		"subst_constructor":{
			"vals":[
				"inputformat",
				{"subst":"src_input_format"}
			],
			"postproc":{"op":"concat", "pad":"="}
		}
	},
	{"id":"pre_alignment_name","required":"no","default":"pre_alignment_realign"},
	{
		"id":"pre_alignment_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"pre_alignment_name"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"alignment_vtf",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"alignment_method"},
				"_alignment.json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"reference_dict",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"reposdir"},
				"/",
				{"subst":"reference_dict_name"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"post_alignment","required":"no","default":"post_alignment_realignment"},
	{
		"id":"post_alignment_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"post_alignment"},
				".json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"initial_phix_aln_bam_name",
		"required":"no",
		"default":"no_aln.bam",
		"subst_constructor":{
			"vals":[
				"no_aln_",
				{"subst":"rpt"},
				".bam"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"initial_phix_aln_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"tmpdir","required":"no","default":"."},
				"/",
				{"subst":"initial_phix_aln_bam_name"}
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"auxmerge_prep_name","required":"no","default":"auxmerge_prep_realign"},
	{
		"id":"auxmerge_prep",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"auxmerge_prep_name"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"target_indicator","default":""},
	{
		"id":"fopid_tgt",
		"comment":"id passed to the final_output_prep template; used there to construct unique file names",
		"subst_constructor":{
			"vals":[ {"subst":"rpt"}, {"subst":"target_indicator"} ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"final_output_prep_target_name","required":"no","default":"final_output_prep"},
	{
		"id":"final_output_prep_target",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"final_output_prep_target_name"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"seqchksum_vtf","required":"no","default":"seqchksum_realign"},
	{
                "id":"seqchksum",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"cfgdatadir"},
				"/",
				{"subst":"seqchksum_vtf"},
				".json"
			],
			"postproc":{"op":"concat", "pad":""}
		}
	}
],
"nodes":[
	{
		"id":"src_bam",
		"type":"INFILE",
		"name":{"subst":"src_bam"},
		"description":"BAM using as input to this pipeline - expected to already contain PhiX (normally from hyb buffer spike-in) alignments"
	},
	{
		"id":"bamcollate2",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":[ "bamcollate2", {"subst":"src_input_format_flag"}, "collate=1", "level=0" ],
		"comment":"ensure BAM records are gathered by template i.e. queryname"
	},
	{
		"id":"tee0",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": false,
		"cmd":[ "teepot", {"subst":"teepot_vflag", "ifnull":"-v"}, {"subst":"teepot_tempdir_flag"}, {"port":"phix_aln", "direction":"out"}, {"port":"tgt_aln", "direction":"out"} ],
		"comment":"specify parameter value teepot_tempdir_value to specif teepot tempdir"
	},
	{
		"id":"pre_alignment_target",
		"type":"VTFILE",
		"node_prefix":"prealntgt_",
		"name":{"subst":"pre_alignment_target"},
		"description":"subgraph containing pre alignment process"
	},
	{
		"id":"alignment_reference_genome",
		"type":"INFILE",
		"name":{"subst":"alignment_reference_genome"},
		"description":"Prefix for reference fasta and Bowtie2 index files"
	},
	{
		"id":"alignment_target",
		"type":"VTFILE",
		"node_prefix":"alntgt_",
		"comment":"inputs: _stdin_ (bam), reference; outputs: _stdout_ (bam)",
		"name":{"subst":"alignment_vtf"},
		"description":"subgraph containing alignment process"
	},
	{
		"id":"reference_dict",
		"type":"INFILE",
		"name":{"subst":"reference_dict"},
		"description":"Extra metadata e.g. UR, M5 auxtags for BAM SQ header records"
	},
	{
		"id":"post_alignment_target",
		"type":"VTFILE",
		"node_prefix":"postalntgt_",
		"comment":"inputs: _stdin_ (bam), reference_dict, no_align_bam; outputs: _stdout_ (bam)",
		"name":{"subst":"post_alignment_target"},
		"description":"subgraph containing post alignment process (target)"
	},
	{
		"id":"bamrecompress_input",
		"type":"EXEC",
		"use_STDIN": true,
		"use_STDOUT": true,
		"cmd":[ "bamrecompress", "verbose=0", "numthreads=2" ]
	},
	{
		"id":"initial_phix_aln_bam",
		"type":"RAFILE",
		"name":{"subst":"initial_phix_aln_bam"}
	},
	{
		"id":"auxmerge_prep",
		"type":"VTFILE",
		"node_prefix":"amp_",
		"name":{"subst":"auxmerge_prep"},
		"description":"subgraph containing pre alignment process"
	},
        {
                "id":"final_output_prep_target",
                "type":"VTFILE",
		"node_prefix":"foptgt_",
		"comment":"inputs: _stdin_ (bam); outputs: _stdout_ (seqchksum)",
                "subst_map":{"phix_or_target":{"subst":"target_indicator"},"fopid":{"subst":"fopid_tgt"},"bstmp":"bsfopt","brtmp":"brfopt","bmdtmp":"bmdfopt","scramble_reference_fasta":{"subst":"reference_genome_fasta"}},
                "name":{"subst":"final_output_prep_target"},
                "description":"subgraph containing post alignment_filter process (target)"
        },
	{
		"id":"seqchksum",
		"type":"VTFILE",
		"node_prefix":"scs_",
		"comment":"inputs: _stdin_ (start bam), target_seqchksum",
		"name":{"subst":"seqchksum"},
		"description":"subgraph containing seqchksum validation of outputs"
	}
],
"edges":[
	{ "id":"src_to_bc2", "from":"src_bam", "to":"bamcollate2" },
	{ "id":"bc2_to_t0", "from":"bamcollate2", "to":"tee0" },
	{ "id":"t0_to_bamrecompress_input", "from":"tee0:phix_aln", "to":"bamrecompress_input" },
	{ "id":"brci_to_ipab", "from":"bamrecompress_input", "to":"initial_phix_aln_bam" },
	{ "id":"ipab_to_bamreset_pre_aln_flt", "from":"initial_phix_aln_bam", "to":"auxmerge_prep" },
	{ "id":"auxmerge_prep_to_post_alignment_target", "from":"auxmerge_prep", "to":"post_alignment_target:no_align_bam" },
	{ "id":"t0_to_pre_alignment_target", "from":"tee0:tgt_aln", "to":"pre_alignment_target" },
	{ "id":"bamadapterclip_to_alignment", "from":"pre_alignment_target", "to":"alignment_target" },
	{ "id":"ref_to_alignment", "from":"alignment_reference_genome", "to":"alignment_target:reference" },
	{ "id":"alignment_target_to_post_alignment_target", "from":"alignment_target", "to":"post_alignment_target" },
        { "id":"reference_dict_to_post_alignment", "from":"reference_dict", "to":"post_alignment_target:reference_dict" },
	{ "id":"post_alignment_to_alignment_filter", "from":"post_alignment_target", "to":"final_output_prep_target" },
        { "id":"src_bam_to_seqchksum", "from":"src_bam", "to":"seqchksum" },
	{ "id":"fopt_to_scs", "from":"final_output_prep_target", "to":"seqchksum:target_seqchksum" }
]
}
