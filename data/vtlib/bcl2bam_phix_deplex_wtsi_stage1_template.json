
{
"description":"This pipeline starts with Illumina2Bam, and ends by running SplitBamByReadGroup to create separate BAM files for each sample.",
"version":"1.0",
"subst_params":[
	{
		"id":"basic_pipeline_params_file",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"cfgdatadir"}, "/", "alignment_common.json" ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"java_cmd","required":"no","default":"java"},
	{"id":"illumina2bam_jar","required":"no","default":"/software/npg/java_jars/Illumina2bam.jar"},
	{
		"id":"i2b_intensity_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["I",{"subst":"i2b_intensity_dir"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_intensity_dir","required":"yes"},
	{"id":"i2b_basecalls_dir_suffix","required":"no","default":"BaseCalls"},
	{
		"id":"i2b_basecalls_dir",
		"required":"no",
		"subst_constructor":{
			"vals":[
				{"subst":"i2b_intensity_dir","required":"yes"},
				"/",
				{"subst":"i2b_basecalls_dir_suffix"}
			],
			"postproc":{"op":"concat","pad":""}
		}
	},
	{
		"id":"i2b_basecalls_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				"B",
				{"subst":"i2b_basecalls_dir"}
			],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{
		"id":"i2b_first_tile_flag",
		"required":"no",
		"subst_constructor":{
			"vals":["FIRST_TILE",{"subst":"i2b_first_tile"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{
		"id":"i2b_tile_limit_flag",
		"required":"no",
		"subst_constructor":{
			"vals":["TILE_LIMIT",{"subst":"i2b_tile_limit"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_lane","required":"no","default":"UNSPECIFIED"},
	{
		"id":"i2b_lane_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["L",{"subst":"i2b_lane"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_library_name","required":"no","default":"UNSPECIFIED"},
	{
		"id":"i2b_library_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["LIBRARY_NAME",{"subst":"i2b_library_name"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_bc_seq_val","required":"no","default":"tr"},
	{
		"id":"i2b_bc_seq_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["BC_SEQ",{"subst":"i2b_bc_seq_val"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_bc_qual_val","required":"no","default":"tr"},
	{
		"id":"i2b_bc_qual_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["BC_QUAL",{"subst":"i2b_bc_qual_val"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_sec_bc_seq_val","required":"no","default":"BC"},
	{
		"id":"i2b_sec_bc_seq_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["SEC_BC_SEQ",{"subst":"i2b_sec_bc_seq_val"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_sec_bc_qual_val","required":"no","default":"QT"},
	{
		"id":"i2b_sec_bc_qual_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["SEC_BC_QUAL",{"subst":"i2b_sec_bc_qual_val"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_sample_alias","required":"no","default":"UNSPECIFIED"},
	{
		"id":"i2b_sample_alias_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["SAMPLE_ALIAS",{"subst":"i2b_sample_alias"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"i2b_study_name","required":"no","default":"UNSPECIFIED"},
	{
		"id":"i2b_study_name_flag",
		"required":"yes",
		"subst_constructor":{
			"vals":["STUDY_NAME",{"subst":"i2b_study_name"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{"id":"decoder_metrics_name","required":"no","default":"decoder_metrics.log"},
	{
		"id":"decoder_metrics",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"outdatadir"}, "/", {"subst":"rpt"}, "_", {"subst":"decoder_metrics_name"} ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{"id":"bamindexdecoder_jar","required":"no","default":"/software/npg/java_jars/BamIndexDecoder.jar"},
	{"id":"barcode_file","required":"yes"},
	{
		"id":"barcode_file_flag",
		"required":"no",
		"subst_constructor":{
			"vals":["BARCODE_FILE",{"subst":"barcode_file"}],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{
		"id":"bamindexdecoder",
		"required":"yes",
		"subst_constructor":{
			"vals":[
				{"subst":"java_cmd"},
				"-Xmx1024m",
				"-jar",{"subst":"bamindexdecoder_jar"},
				"I=/dev/stdin",
				"O=/dev/stdout",
				"M=__METRICS_FILE_OUT__",
				{"subst":"barcode_file_flag"}
			],
			"postproc":{"op":"pack","pad":" "}
		}
	},
	{"id":"phix_alignment_method","required":"no","default":"bwa_aln"},
        {
                "id":"alignment_vtf",
                "required":"yes",
                "subst_constructor":{
                        "vals":[ {"subst":"cfgdatadir"}, "/", {"subst":"phix_alignment_method"}, "_alignment.json" ],
                        "postproc":{"op":"concat", "pad":""}
                }
        },
	{"id":"split_prefix","required":"yes"},
	{
		"id":"split_format",
		"required":"no",
		"subst_constructor":{
			"vals":[
				{"subst":"split_prefix"},
				"/",
				{"subst":"rpt"},
				"_%#.bam"
			],
			"postproc":{"op":"concat","pad":""}
		}
	},
	{
		"id":"bamadapterfind_md5_file",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"rpt"}, ".bam.md5" ],
			"postproc":{"op":"concat","pad":""}
		}
	},
	{
		"id":"bamadapterfind_md5file_flag",
		"subst_constructor":{
			"vals":[ "md5filename", {"subst":"bamadapterfind_md5_file"} ],
			"postproc":{"op":"concat","pad":"="}
		}
	},
	{
		"id":"spatial_filter_file",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"outdatadir"}, "/", {"subst":"rpt"}, "_spatial_filter.dat" ],
			"postproc":{"op":"concat","pad":""}
		}
	},
	{
		"id":"pre_spatial_filter_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"tmpdir"}, "/", {"subst":"rpt"}, "_sf_tmp.dat" ],
			"postproc":{"op":"concat","pad":""}
		}
	},
	{
		"id":"filtered_bam",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"outdatadir"}, "/", {"subst":"rpt"}, "_filtered.bam" ],
			"postproc":{"op":"concat","pad":""}
		}
	},
	{"id":"refname_phix","required":"yes"},
	{
		"id":"reference_phix",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"reposdir"}, "/", {"subst":"refname_phix"} ],
			"postproc":{"op":"concat", "pad":""}
		}
	},
	{
		"id":"tee_decode",
		"required":"yes",
		"subst_constructor":{
			"vals":[ {"subst":"tmpdir"}, "/", {"subst":"rpt"}, "_tee_decode.bam" ],
			"postproc":{"op":"concat","pad":""}
		}
	}
],
"nodes":[
	{
		"id":"illumina2bam",
		"type":"EXEC",
		"cmd":[
			{"subst":"java_cmd"},
			"-Xmx1024m",
			"-jar",{"subst":"illumina2bam_jar"},
			{"subst":"i2b_intensity_flag"},
			{"subst":"i2b_basecalls_flag"},
			{"subst":"i2b_bc_seq_flag"},
			{"subst":"i2b_bc_qual_flag"},
			{"subst":"i2b_sec_bc_seq_flag"},
			{"subst":"i2b_sec_bc_qual_flag"},
			{"subst":"i2b_first_tile_flag"},
			{"subst":"i2b_tile_limit_flag"},
			"OUTPUT=/dev/stdout",
			{"subst":"i2b_lane_flag"},
			{"subst":"i2b_library_flag"},
			{"subst":"i2b_sample_alias_flag"},
			{"subst":"i2b_study_name_flag"},
			"COMPRESSION_LEVEL=0"
		],
		"description":"Create the initial BAM file from the data generated by the Illumina machine"
	},
	{
		"id":"bamadapterfind",
		"type":"EXEC",
		"cmd":[ "bamadapterfind", "md5=1", {"subst":"bamadapterfind_md5file_flag"} ],
		"description":"Find and mark the adaptors used by Illumina"
	},
	{
		"id":"bamindexdecoder",
		"type":"EXEC",
		"cmd":[
			{"subst":"java_cmd"},
			"-Xmx1024m",
			"-jar", {"subst":"bamindexdecoder_jar"},
			"I=/dev/stdin",
			"O=/dev/stdout",
			"M=__METRICS_FILE_OUT__",
			{"subst":"barcode_file_flag"}
		]
	},
	{
		"id":"decoder_metrics",
		"type":"OUTFILE",
		"name":{"subst":"decoder_metrics"}
	},
	{
		"id":"bamcollate",
		"type":"EXEC",
		"cmd":[ "bamcollate2", "collate=2", "level=0" ]
	},
	{
		"id":"tee_decode",
		"type":"EXEC",
		"cmd":[ "teepot", {"subst":"teepot_vflag", "ifnull":"-v"}, "-m", "2M", "__TD1_OUT__", "__TD2_OUT__" ]
	},
	{
		"id":"simple_cat",
		"type":"EXEC",
		"use_STDIN":true,
		"use_STDOUT":true,
		"cmd":"cat"
	},
        {
                "id":"alignment_phix",
                "type":"VTFILE",
                "comment":"inputs: _stdin_ (bam), reference; outputs: _stdout_ (bam)",
                "node_prefix":"alnphix_",
                "name":{"subst":"alignment_vtf"},
                "description":"subgraph containing alignment process"
        },
	{
		"id":"reference_phix",
		"type":"INFILE",
		"name":{"subst":"reference_phix"},
		"description":"Prefix for Phix reference"
	},
	{
		"id":"bammerge",
		"type":"EXEC",
		"cmd":[ "bam12auxmerge", "level=0", "rankstrip=1", "ranksplit=0", "zztoname=0", "clipreinsert=1", "__PREALN_BAM_IN__" ]
	},
	{
		"id":"prefilter",
		"type":"EXEC",
		"cmd":[ "teepot", {"subst":"teepot_vflag", "ifnull":"-v"}, "-t", ".", "-m", "2M", "__PF1_OUT__", "__PF2_OUT__" ]
	},
	{
		"id":"cat2",
		"type":"EXEC",
		"cmd":"cat",
		"use_STDIN":true,
		"use_STDOUT":true,
		"description":"bam data to which the spatial filter is applied"
	},
	{
		"id":"create_filter",
		"type":"EXEC",
		"cmd":[ "spatial_filter", "-c", "-q", "-F", "/dev/stdout", "/dev/stdin" ],
		"description":"Create a spatial filter"
	},
	{
		"id":"spatial_filter_file",
		"type":"RAFILE",
		"name":{"subst":"spatial_filter_file"},
		"description":"spatial filter file"
	},
	{
		"id":"apply_filter",
		"type":"EXEC",
		"cmd":[ "spatial_filter", "-a", "-f", "-q", "-F __FILTER_IN__", "/dev/stdin" ],
		"description":"Apply a spatial filter"
	},
	{
		"id":"tee_split",
		"type":"EXEC",
		"cmd":[ "teepot", {"subst":"teepot_vflag", "ifnull":"-v"}, "-m", "5M __FILTERED_BAM_OUT__", "__SPLIT_BAM_OUT__" ]
	},
	{
		"id":"filtered_bam",
		"type":"OUTFILE",
		"name":{"subst":"filtered_bam"},
		"description":"BAM file after PhiX alignment and spatial filtering"
	},
	{
		"id":"splitter",
		"type":"EXEC",
		"cmd":[ {"subst":"samtools_executable"}, "split", "-f", {"subst":"split_format"}, "-" ],
		"description":"Split the BAM file into separate BAM files by Read Group"
	}
],
"edges":[
	{ "id":"illumina2bam_to_bamadapterfind", "from":"illumina2bam", "to":"bamadapterfind" },
	{ "id":"bamadapterfind_to_decoder", "from":"bamadapterfind", "to":"bamindexdecoder" },
	{ "id":"bamindexdecoder_to_collate", "from":"bamindexdecoder", "to":"bamcollate" },
	{ "id":"collate_to_tee", "from":"bamcollate", "to":"tee_decode" },
	{ "id":"decoder_to_metrics", "from":"bamindexdecoder:__METRICS_FILE_OUT__", "to":"decoder_metrics" },
	{ "id":"tee_decode_to_cat", "from":"tee_decode:__TD1_OUT__", "to":"simple_cat" },
	{ "id":"cat_to_merge", "from":"simple_cat", "to":"bammerge:__PREALN_BAM_IN__" },
	{ "id":"tee_decode_to_alignment", "from":"tee_decode:__TD2_OUT__", "old_to":"bam2fastq", "to":"alignment_phix" },
	{ "id":"ref_to_alignment", "from":"reference_phix", "to":"alignment_phix:reference" },
	{ "id":"alignment_to_merge", "from":"alignment_phix", "to":"bammerge" },
	{ "id":"merge_to_prefilter", "from":"bammerge", "to":"prefilter" },
	{ "id":"prefilter_to_create_filter", "from":"prefilter:__PF1_OUT__", "to":"create_filter" },
	{ "id":"create_filter_to_filter_file", "from":"create_filter", "to":"spatial_filter_file" },
	{ "id":"filter_file_to_apply_filter", "from":"spatial_filter_file", "to":"apply_filter:__FILTER_IN__" },
	{ "id":"prefilter_to_tmp_bam", "from":"prefilter:__PF2_OUT__", "to":"pre_spatial_filter_bam" },
	{ "id":"tmp_bam_to_apply", "from":"pre_spatial_filter_bam", "to":"apply_filter" },
	{ "id":"apply_filter_to_tee", "from":"apply_filter", "to":"tee_split" },
	{ "id":"tee_to_filtered_bam", "from":"tee_split:__FILTERED_BAM_OUT__", "to":"filtered_bam" },
	{ "id":"tee_to_splitter", "from":"tee_split:__SPLIT_BAM_OUT__", "to":"splitter" }
]
}
